{"version":3,"sources":["layout/Calculator/Keypad/KeypadRow.js","components/Button.js","layout/Calculator/Keypad/Keypad.js","reportWebVitals.js","index.js","layout/Calculator/Calculator.js","layout/Calculator/Screen/ComputationScreen.js","layout/Calculator/Screen/ResultScreen.js","layout/Calculator/Screen/Screen.js"],"names":["keypadRow","props","className","children","button","type","onButtonPress","classes","push","onClick","join","keypad","KeypadRow","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Clock","state","date","Date","counter","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","React","Component","ReactDOM","render","document","getElementById","Calculator","equation","result","event","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","error","alert","trim","substr","length","computationScreen","resultScreen","screen","ResultScreen","ComputationScreen"],"mappings":"oHAQeA,G,KANG,SAACC,GAAD,OACd,qBAAKC,UAAU,YAAf,SACKD,EAAME,aCcAC,EAhBA,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,KAAMF,EAA6B,EAA7BA,SAAUG,EAAmB,EAAnBA,cAEvBC,EAAU,CAAC,OAMjB,MAJoB,qBAATF,GACPE,EAAQC,KAAK,MAAQH,GAIrB,wBAAQI,QAASH,EAAeJ,UAAYK,EAAQG,KAAK,KAAzD,SACKP,KC6BEQ,IAnCA,SAACV,GAAD,OACX,0BAASC,UAAU,SAAnB,UACI,eAACU,EAAD,WACI,cAACC,EAAD,CAAQR,KAAK,UAAUC,cAAeL,EAAMK,cAA5C,eACA,cAACO,EAAD,CAAQR,KAAK,UAAUC,cAAeL,EAAMK,cAA5C,oBACA,cAACO,EAAD,CAAQR,KAAK,WAAWC,cAAeL,EAAMK,cAA7C,eACA,cAACO,EAAD,CAAQR,KAAK,WAAWC,cAAeL,EAAMK,cAA7C,kBAEJ,eAACM,EAAD,WACI,cAACC,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQR,KAAK,WAAWC,cAAeL,EAAMK,cAA7C,kBAEJ,eAACM,EAAD,WACI,cAACC,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQR,KAAK,WAAWC,cAAeL,EAAMK,cAA7C,kBAEJ,eAACM,EAAD,WACI,cAACC,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQR,KAAK,WAAWC,cAAeL,EAAMK,cAA7C,kBAEJ,eAACM,EAAD,WACI,cAACC,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAA7B,eACA,cAACO,EAAD,CAAQP,cAAeL,EAAMK,cAAeD,KAAK,QAAjD,uB,mICvBGS,G,WAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDRQ,E,kDACJ,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDuB,MAAQ,CACXC,KAAM,IAAIC,KACVC,QAAS,GAJM,E,gEAQE,IAAD,OAClBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,O,6CAKFC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CACZR,KAAM,IAAIC,OAGZE,KAAKK,UAAS,SAACT,GAAD,MAAY,CACtBG,QAASH,EAAMG,QAAU,Q,+BAK7B,OACE,gCACE,+CACA,wCAAWC,KAAKJ,MAAMC,KAAKS,qBAA3B,OACA,iDAAoBN,KAAKJ,MAAMG,kB,GAnCnBQ,IAAMC,WAyC1BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B1B,K,6zCCnDM2B,W,s0BAEFjB,MAAQ,CACJkB,SAAU,GACVC,OAAQ,G,MAGZrC,cAAgB,SAAAsC,OAEZ,IAAIF,SAAW,MAAKlB,MAAMkB,SACpBG,cAAgBD,MAAME,OAAOC,UAEnC,GAAsB,MAAlBF,cACA,OAAO,MAAKG,QAEX,GAAKH,eAAiB,KAAOA,eAAiB,KAA0B,MAAlBA,cACvDH,UAAYG,mBAEX,IAA0D,IAAtD,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKI,QAAQJ,eACvCH,UAAY,IAAMG,cAAgB,SAEjC,GAAsB,MAAlBA,cACL,IACI,IAAMK,WAAaC,KAAKT,UAClBC,OAASS,OAAOC,UAAUH,YAAaA,WAAaA,WAAWI,QAAQ,GAC7E,MAAKrB,SAAS,CAACU,gBACjB,MAAOY,OACLC,MAAM,sCAIVd,SAAWA,SAASe,OACpBf,SAAWA,SAASgB,OAAO,EAAGhB,SAASiB,OAAS,GAGpD,MAAK1B,SAAS,CAACS,SAAUA,Y,4OAIzBd,KAAKK,SAAS,CAACS,SAAU,GAAIC,OAAQ,M,+BAIrC,OACI,oEAAMzC,UAAU,aAAhB,UACI,2DAAC,8CAAD,CACIwC,SAAUd,KAAKJ,MAAMkB,SACrBC,OAAQf,KAAKJ,MAAMmB,SAEvB,2DAAC,8CAAD,CAAQrC,cAAesB,KAAKtB,uB,YAjDnB6B,6CAAMC,WAuDhBK,kC,0CCnDAmB,G,KANW,SAAC3D,GAAD,OACtB,qBAAKC,UAAU,oBAAf,SACKD,EAAMyC,aCIAmB,EANM,SAAC5D,GAAD,OACjB,qBAAKC,UAAU,eAAf,SACKD,EAAM0C,UCSAmB,IATA,SAAC7D,GAAD,OACX,0BAASC,UAAU,SAAnB,UACI,cAAC6D,EAAD,CAAcpB,OAAQ1C,EAAM0C,SAE5B,cAACqB,EAAD,CAAmBtB,SAAUzC,EAAMyC,iB","file":"static/js/main.e7eeffe9.chunk.js","sourcesContent":["import React from 'react'; \n\nconst keypadRow = (props) => (\n    <div className=\"keypadRow\">\n        {props.children}\n    </div>\n);\n\nexport default keypadRow; ","import React from 'react'; \n\nconst button = ({type, children, onButtonPress}) => {\n\n    const classes = ['btn']; \n\n    if (typeof type !== 'undefined') {\n        classes.push('btn' + type); \n    }\n\n    return (\n        <button onClick={onButtonPress} className={ classes.join(' ') }>\n            {children}\n        </button>\n    );\n\n}\n\nexport default button; ","import React from 'react'; \n\nimport KeypadRow from './KeypadRow'; \nimport Button from '../../../components/Button'; \n \n\nconst keypad = (props) => (\n    <section className=\"keypad\">\n        <KeypadRow>\n            <Button type=\"Primary\" onButtonPress={props.onButtonPress}>C</Button>\n            <Button type=\"Primary\" onButtonPress={props.onButtonPress}>&larr;</Button>\n            <Button type=\"Operator\" onButtonPress={props.onButtonPress}>%</Button>\n            <Button type=\"Operator\" onButtonPress={props.onButtonPress}>/</Button>\n        </KeypadRow>\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>9</Button>\n            <Button onButtonPress={props.onButtonPress}>8</Button>\n            <Button onButtonPress={props.onButtonPress}>7</Button>\n            <Button type=\"Operator\" onButtonPress={props.onButtonPress}>*</Button>\n        </KeypadRow>\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>6</Button>\n            <Button onButtonPress={props.onButtonPress}>5</Button>\n            <Button onButtonPress={props.onButtonPress}>4</Button>\n            <Button type=\"Operator\" onButtonPress={props.onButtonPress}>-</Button>\n        </KeypadRow>\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>3</Button>\n            <Button onButtonPress={props.onButtonPress}>2</Button>\n            <Button onButtonPress={props.onButtonPress}>1</Button>\n            <Button type=\"Operator\" onButtonPress={props.onButtonPress}>+</Button>\n        </KeypadRow>\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>0</Button>\n            <Button onButtonPress={props.onButtonPress}>.</Button>\n            <Button onButtonPress={props.onButtonPress} type=\"Large\">=</Button>\n            \n        </KeypadRow>\n    </section>\n);\n\nexport default keypad;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      counter: 0\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date(), \n    });\n    \n    this.setState((state) => ({\n        counter: state.counter + 1\n    })); \n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n        <h2>Current count: {this.state.counter}</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react'; \nimport Screen from './Screen/Screen'; \nimport Keypad from './Keypad/Keypad'; \n\nclass Calculator extends React.Component {\n\n    state = {\n        equation: '', \n        result: 0\n    };\n\n    onButtonPress = event => {\n\n        let equation = this.state.equation;\n        const pressedButton = event.target.innerHTML;\n\n        if (pressedButton === 'C') {\n            return this.clear();\n        }\n        else if ((pressedButton >= '0' && pressedButton <= '9') || pressedButton === '.') {\n            equation += pressedButton;\n        }\n        else if (['+', '-', '*', '/', '%'].indexOf(pressedButton) !== -1) {\n            equation += ' ' + pressedButton + ' ';\n        }\n        else if (pressedButton === '=') {\n            try {\n                const evalResult = eval(equation);\n                const result = Number.isInteger(evalResult)? evalResult : evalResult.toFixed(2);\n                this.setState({result});\n            } catch (error) {\n                alert('Invalid Mathematical Equation');\n            }\n        }\n        else {\n            equation = equation.trim();\n            equation = equation.substr(0, equation.length - 1);\n        }\n                    \n        this.setState({equation: equation});\n    }\n    \n    clear() {\n        this.setState({equation: '', result: 0});\n    }\n\n    render() {\n        return (\n            <main className=\"calculator\">\n                <Screen \n                    equation={this.state.equation}\n                    result={this.state.result}\n                />\n                <Keypad onButtonPress={this.onButtonPress} />\n            </main>\n        );\n    }\n}\n\nexport default Calculator; ","import React from 'react'; \n\nconst computationScreen = (props) => (\n    <div className=\"computationScreen\">\n        {props.equation}\n    </div>\n); \n\nexport default computationScreen; ","import React from 'react'; \n\nconst resultScreen = (props) => (\n    <div className=\"resultScreen\">\n        {props.result}\n    </div>\n); \n\nexport default resultScreen; ","import React from 'react'; \nimport ComputationScreen from './ComputationScreen'; \nimport ResultScreen from './ResultScreen'; \n\nconst screen = (props) => (\n    <section className=\"screen\">\n        <ResultScreen result={props.result}>\n        </ResultScreen> \n        <ComputationScreen equation={props.equation}>\n        </ComputationScreen>\n    </section>\n); \n\nexport default screen; "],"sourceRoot":""}